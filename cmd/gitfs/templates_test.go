// Code generated by gitfs; DO NOT EDIT
package main

import (
	"context"
	"testing"

	"github.com/posener/gitfs"
	"github.com/posener/gitfs/fsutil"
)

// TestTemplates checks that packed binary matches the local conent.
// To skip generating this test run gitfs with -skip-test-gen flag.
func TestTemplates(t *testing.T) {
	ctx := context.Background()
	projects := []struct {
		project string
		glob    []string
	}{
		{
			project: "github.com/posener/gitfs/cmd/gitfs/templates",
		},
	}
	for _, tt := range projects {
		t.Run(tt.project, func(t *testing.T) {
			binary, err := gitfs.New(ctx, tt.project, gitfs.OptGlob(tt.glob...))
			if err != nil {
				t.Fatalf("Failed loading binary project %q: %s", tt.project, err)
			}
			local, err := gitfs.New(ctx, tt.project, gitfs.OptLocal("."), gitfs.OptGlob(tt.glob...))
			if err != nil {
				t.Fatalf("Failed loading local project %q: %s", tt.project, err)
			}
			diff, err := fsutil.Diff(local, binary)
			if err != nil {
				t.Fatalf("Failed performing filesystem diff: %s", err)
			}
			diff.A = "local"
			diff.B = "binary"

			if d := diff.String(); d != "" {
				t.Errorf("Filesystem was modified after last binary generated. Please regenerae.\nDiff:\n%s", d)
			}
		})
	}
}
